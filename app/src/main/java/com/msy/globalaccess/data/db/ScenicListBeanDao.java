package com.msy.globalaccess.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.msy.globalaccess.data.bean.scenic.ScenicListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENIC_LIST_BEAN".
*/
public class ScenicListBeanDao extends AbstractDao<ScenicListBean, Long> {

    public static final String TABLENAME = "SCENIC_LIST_BEAN";

    /**
     * Properties of entity ScenicListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScenicId = new Property(1, String.class, "scenicId", false, "SCENIC_ID");
        public final static Property ScenicName = new Property(2, String.class, "scenicName", false, "SCENIC_NAME");
        public final static Property IsOrderTicket = new Property(3, String.class, "isOrderTicket", false, "IS_ORDER_TICKET");
        public final static Property PscenicId = new Property(4, String.class, "pscenicId", false, "PSCENIC_ID");
        public final static Property IsAcc = new Property(5, String.class, "isAcc", false, "IS_ACC");
    }


    public ScenicListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ScenicListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENIC_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SCENIC_ID\" TEXT," + // 1: scenicId
                "\"SCENIC_NAME\" TEXT," + // 2: scenicName
                "\"IS_ORDER_TICKET\" TEXT," + // 3: isOrderTicket
                "\"PSCENIC_ID\" TEXT," + // 4: pscenicId
                "\"IS_ACC\" TEXT);"); // 5: isAcc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENIC_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScenicListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scenicId = entity.getScenicId();
        if (scenicId != null) {
            stmt.bindString(2, scenicId);
        }
 
        String scenicName = entity.getScenicName();
        if (scenicName != null) {
            stmt.bindString(3, scenicName);
        }
 
        String isOrderTicket = entity.getIsOrderTicket();
        if (isOrderTicket != null) {
            stmt.bindString(4, isOrderTicket);
        }
 
        String pscenicId = entity.getPscenicId();
        if (pscenicId != null) {
            stmt.bindString(5, pscenicId);
        }
 
        String isAcc = entity.getIsAcc();
        if (isAcc != null) {
            stmt.bindString(6, isAcc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScenicListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scenicId = entity.getScenicId();
        if (scenicId != null) {
            stmt.bindString(2, scenicId);
        }
 
        String scenicName = entity.getScenicName();
        if (scenicName != null) {
            stmt.bindString(3, scenicName);
        }
 
        String isOrderTicket = entity.getIsOrderTicket();
        if (isOrderTicket != null) {
            stmt.bindString(4, isOrderTicket);
        }
 
        String pscenicId = entity.getPscenicId();
        if (pscenicId != null) {
            stmt.bindString(5, pscenicId);
        }
 
        String isAcc = entity.getIsAcc();
        if (isAcc != null) {
            stmt.bindString(6, isAcc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScenicListBean readEntity(Cursor cursor, int offset) {
        ScenicListBean entity = new ScenicListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scenicId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scenicName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isOrderTicket
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pscenicId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // isAcc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScenicListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScenicId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScenicName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsOrderTicket(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPscenicId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsAcc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScenicListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScenicListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScenicListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
