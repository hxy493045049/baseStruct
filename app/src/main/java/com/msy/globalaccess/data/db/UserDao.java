package com.msy.globalaccess.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.msy.globalaccess.data.bean.user.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserAccount = new Property(2, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property UserPassword = new Property(3, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserLoginStatus = new Property(4, int.class, "userLoginStatus", false, "USER_LOGIN_STATUS");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property UserTel = new Property(6, String.class, "userTel", false, "USER_TEL");
        public final static Property UserMobile = new Property(7, String.class, "userMobile", false, "USER_MOBILE");
        public final static Property UserEmail = new Property(8, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserAddr = new Property(9, String.class, "userAddr", false, "USER_ADDR");
        public final static Property UserRegDate = new Property(10, String.class, "userRegDate", false, "USER_REG_DATE");
        public final static Property UserRoleType = new Property(11, String.class, "userRoleType", false, "USER_ROLE_TYPE");
        public final static Property UserSystem = new Property(12, String.class, "userSystem", false, "USER_SYSTEM");
        public final static Property UserUnitName = new Property(13, String.class, "userUnitName", false, "USER_UNIT_NAME");
        public final static Property UserDepName = new Property(14, String.class, "userDepName", false, "USER_DEP_NAME");
        public final static Property RoleList = new Property(15, String.class, "roleList", false, "ROLE_LIST");
        public final static Property UnitId = new Property(16, String.class, "unitId", false, "UNIT_ID");
        public final static Property CityId = new Property(17, String.class, "cityId", false, "CITY_ID");
        public final static Property CityName = new Property(18, String.class, "cityName", false, "CITY_NAME");
        public final static Property Province = new Property(19, String.class, "province", false, "PROVINCE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_ACCOUNT\" TEXT," + // 2: userAccount
                "\"USER_PASSWORD\" TEXT," + // 3: userPassword
                "\"USER_LOGIN_STATUS\" INTEGER NOT NULL ," + // 4: userLoginStatus
                "\"USERNAME\" TEXT," + // 5: username
                "\"USER_TEL\" TEXT," + // 6: userTel
                "\"USER_MOBILE\" TEXT," + // 7: userMobile
                "\"USER_EMAIL\" TEXT," + // 8: userEmail
                "\"USER_ADDR\" TEXT," + // 9: userAddr
                "\"USER_REG_DATE\" TEXT," + // 10: userRegDate
                "\"USER_ROLE_TYPE\" TEXT," + // 11: userRoleType
                "\"USER_SYSTEM\" TEXT," + // 12: userSystem
                "\"USER_UNIT_NAME\" TEXT," + // 13: userUnitName
                "\"USER_DEP_NAME\" TEXT," + // 14: userDepName
                "\"ROLE_LIST\" TEXT," + // 15: roleList
                "\"UNIT_ID\" TEXT," + // 16: unitId
                "\"CITY_ID\" TEXT," + // 17: cityId
                "\"CITY_NAME\" TEXT," + // 18: cityName
                "\"PROVINCE\" TEXT);"); // 19: province
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(4, userPassword);
        }
        stmt.bindLong(5, entity.getUserLoginStatus());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(7, userTel);
        }
 
        String userMobile = entity.getUserMobile();
        if (userMobile != null) {
            stmt.bindString(8, userMobile);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(9, userEmail);
        }
 
        String userAddr = entity.getUserAddr();
        if (userAddr != null) {
            stmt.bindString(10, userAddr);
        }
 
        String userRegDate = entity.getUserRegDate();
        if (userRegDate != null) {
            stmt.bindString(11, userRegDate);
        }
 
        String userRoleType = entity.getUserRoleType();
        if (userRoleType != null) {
            stmt.bindString(12, userRoleType);
        }
 
        String userSystem = entity.getUserSystem();
        if (userSystem != null) {
            stmt.bindString(13, userSystem);
        }
 
        String userUnitName = entity.getUserUnitName();
        if (userUnitName != null) {
            stmt.bindString(14, userUnitName);
        }
 
        String userDepName = entity.getUserDepName();
        if (userDepName != null) {
            stmt.bindString(15, userDepName);
        }
 
        String roleList = entity.getRoleList();
        if (roleList != null) {
            stmt.bindString(16, roleList);
        }
 
        String unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindString(17, unitId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(18, cityId);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(19, cityName);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(20, province);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(4, userPassword);
        }
        stmt.bindLong(5, entity.getUserLoginStatus());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(7, userTel);
        }
 
        String userMobile = entity.getUserMobile();
        if (userMobile != null) {
            stmt.bindString(8, userMobile);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(9, userEmail);
        }
 
        String userAddr = entity.getUserAddr();
        if (userAddr != null) {
            stmt.bindString(10, userAddr);
        }
 
        String userRegDate = entity.getUserRegDate();
        if (userRegDate != null) {
            stmt.bindString(11, userRegDate);
        }
 
        String userRoleType = entity.getUserRoleType();
        if (userRoleType != null) {
            stmt.bindString(12, userRoleType);
        }
 
        String userSystem = entity.getUserSystem();
        if (userSystem != null) {
            stmt.bindString(13, userSystem);
        }
 
        String userUnitName = entity.getUserUnitName();
        if (userUnitName != null) {
            stmt.bindString(14, userUnitName);
        }
 
        String userDepName = entity.getUserDepName();
        if (userDepName != null) {
            stmt.bindString(15, userDepName);
        }
 
        String roleList = entity.getRoleList();
        if (roleList != null) {
            stmt.bindString(16, roleList);
        }
 
        String unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindString(17, unitId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(18, cityId);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(19, cityName);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(20, province);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userAccount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userPassword
            cursor.getInt(offset + 4), // userLoginStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userTel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userMobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userAddr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userRegDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userRoleType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userSystem
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userUnitName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userDepName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // roleList
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // unitId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // cityId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cityName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // province
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLoginStatus(cursor.getInt(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserTel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserAddr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserRegDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserRoleType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserSystem(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserUnitName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserDepName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRoleList(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUnitId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCityId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCityName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setProvince(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
